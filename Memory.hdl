// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    //16383=011 1111 1111 1111
    //24575=100 0000 0000 0000
    //24576=110 0000 0000 0000

    DMux(in=load,sel=address[14],a=memoryload,b=screenload);
    RAM16K(in=in,load=memoryload,address=address[0..13],out=ramout);
    Screen(in=in,load=screenload,address=address[0..12],out=screenout);
    Mux16(a=ramout,b=screenout,sel=address[14],out=muxout);

    //Keyboard control bit
    //KBD24576=110 0000 0000 0000,address[14] and address[13]=1,address[0..12]=0
    Or8Way(in=address[0..7],out=kbdload1);
    Or8Way(in=address[5..12],out=kbdload2);
    Not(in=kbdload1,out=notkbdload1);
    Not(in=kbdload2,out=notkbdload2);
    And(a=notkbdload1,b=notkbdload2,out=load3);
    And(a=address[13],b=address[14],out=load4);
    And(a=load3,b=load4,out=kbdload);

    //Keyboad
    Keyboard(out=keyboardout);
    Mux16(a=muxout,b=keyboardout,sel=kbdload,out=out); //kbdload can also be changed into load4 and not consider address[0..12]
}